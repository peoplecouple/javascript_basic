JAVASCRIPT 문법 기초

var (옛날문법)
let(변수)와 const(상수)로 나뉜다. 자료나 함수를 담는다.

let은 선언과 할당을 따로 해 줄 수 있지만
let name;
name = seungah;

const는 선언과 할당을 동시에 해야 한다.
const name; -> 할당만 할 경우 에러가 난다.
const name = seungah;


=== 자료형 ===
숫자 
문자 
참거짓 
undefined  
null 
객체 
배열 
함수



=== 함수 선언 ===
함수를 선언하면 순서 상관없이 실행된다(호이스팅, 선언을 호출 아래에 하더라도 실행됨 )
선언식=> function 함수명() {}
함수표현식 변수에 담으면 순서가 중요해진다. -> 화살표 함수(안에 html도 쓸 수 있다, 간단하다, 하지만 this가 없다) 때문에 많이 씀
표현식1=> const 함수명 = function() {}  ===> 함수에 이름이 없다고 해서 무명함수 
표현식2=> const 함수명 = () => {} 


=== 함수 호출 ===
조건 없이 호출 할 땐 함수명()

  [] 배열
  {} 객체, 코드블럭
  () 함수


addeventlistner 를 쓸 경우 event 매개변수를 받아올 수 있다.

$() = jquery객체를 만드는 함수

객체아래의 function은 method

함수 속의 함수는 callback 함수

let은 숫자 배열 함수를 쓸 때

뒤에 식이 변하는가 안변하는가를 두고 const 와 let을 구분해서 쓰자

객체 ex
const 핸드폰 = {
  color : "레드",
  comp : "삼성",
  size : "9in"
}
부를 땐 핸드폰.color 또는 핸드폰[color]

배열 ex
const 핸드폰 = ["레드", "삼성", "9in"] 
부를 땐 핸드폰[0]

Array help method -> forEach, map, filter

☆데이터는 사본을 만들어서 쓴다. -> ... spread로 만든다. DB -> [...DB]이렇게

그러므로 배열 데이터를 불러올때 new배열을 만든다. map은 데이터를 불러올때 filter는 뺄 때

비동기 = 동시에 일을 할 수 있게 해주는 것, 이렇게 특정 로직의 실행이 끝날 때까지 기다려주지 않고 나머지 코드를 먼저 실행하는 것이 비동기 처리. Promise => react에서 자료를 받아올 때 사용
